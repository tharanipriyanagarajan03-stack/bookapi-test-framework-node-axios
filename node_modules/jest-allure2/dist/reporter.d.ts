/// <reference types="node" />
import { Allure, AllureGroup, AllureRuntime, AllureStep, AllureTest, ContentType, ExecutableItemWrapper, IAllureConfig, Status, StepInterface } from 'allure-js-commons';
export declare type Attachment = {
    name: string;
    content: Buffer | string;
    type: ContentType;
};
export interface JAllureConfig extends IAllureConfig {
    projectDir?: string;
}
export declare class JasmineAllureReporter implements jasmine.CustomReporter {
    runningExecutable: ExecutableItemWrapper | null;
    private readonly config;
    private readonly groupStack;
    private readonly labelStack;
    private runningTest;
    private stepStack;
    private get isSuite();
    private readonly runtime;
    constructor(config: JAllureConfig);
    getInterface(): JasmineAllureInterface;
    get currentGroup(): AllureGroup;
    get currentTest(): AllureTest;
    get currentExecutable(): ExecutableItemWrapper | null;
    writeAttachment(content: Buffer | string, type: ContentType): string;
    jasmineStarted(_suiteInfo: jasmine.SuiteInfo): void;
    specStarted(spec: jasmine.CustomReporterResult): void;
    specDone(spec: jasmine.CustomReporterResult): void;
    jasmineDone(_runDetails: jasmine.RunDetails): void;
    addLabel(name: string, value: string): void;
    pushStep(step: AllureStep): void;
    popStep(): void;
    get currentStep(): AllureStep | null;
    private getCurrentGroup;
    private findMessageAboutThrow;
    private findAnyError;
    private installHooks;
}
export declare class JasmineAllureInterface extends Allure {
    private readonly reporter;
    constructor(reporter: JasmineAllureReporter, runtime: AllureRuntime);
    setup<T>(body: () => any): any;
    step<T>(name: string, body: (step: StepInterface) => any): any;
    logStep(name: string, status: Status, attachments?: [Attachment]): void;
    attachment(name: string, content: Buffer | string, type: ContentType): void;
    parameter(name: string, value: string): void;
    label(name: string, value: string): void;
    startStep(name: string): WrappedStep;
    protected get currentExecutable(): ExecutableItemWrapper;
    protected get currentTest(): AllureTest;
}
export declare class WrappedStep {
    private readonly reporter;
    private readonly step;
    constructor(reporter: JasmineAllureReporter, step: AllureStep);
    startStep(name: string): WrappedStep;
    attach(name: string, content: Buffer | string, type: ContentType): void;
    param(name: string, value: string): void;
    logStep(status: Status): void;
    run<T>(body: (step: StepInterface) => T): T;
    endStep(): void;
}
